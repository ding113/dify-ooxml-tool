name: CI and Build for Dify Plugin

on:
  push:
    branches: [ main, develop ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    # Allow manual trigger

env:
  PYTHON_VERSION: '3.12'

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # Install additional dev dependencies for testing
          pip install pytest pylint flake8 black

      - name: Code formatting check with Black
        run: |
          black --check --diff .
        continue-on-error: true

      - name: Lint with flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
        continue-on-error: true

      - name: Lint with pylint
        run: |
          pylint --disable=all --enable=E,F --exit-zero **/*.py
        continue-on-error: true

      - name: Validate plugin structure
        run: |
          echo "Validating plugin structure..."
          
          # Check required files exist
          required_files=("manifest.yaml" "main.py" "requirements.txt")
          for file in "${required_files[@]}"; do
            if [[ ! -f "$file" ]]; then
              echo "❌ Missing required file: $file"
              exit 1
            else
              echo "✅ Found: $file"
            fi
          done
          
          # Check provider directory exists
          if [[ ! -d "provider" ]]; then
            echo "❌ Missing provider directory"
            exit 1
          else
            echo "✅ Found: provider directory"
          fi
          
          # Check tools directory exists
          if [[ ! -d "tools" ]]; then
            echo "❌ Missing tools directory"
            exit 1
          else
            echo "✅ Found: tools directory"
          fi

      - name: Validate manifest.yaml
        run: |
          echo "Validating manifest.yaml..."
          python -c "
          import yaml
          import sys
          
          try:
              with open('manifest.yaml', 'r') as f:
                  manifest = yaml.safe_load(f)
              
              required_fields = ['name', 'version', 'type', 'author']
              missing_fields = []
              
              for field in required_fields:
                  if field not in manifest:
                      missing_fields.append(field)
              
              if missing_fields:
                  print(f'❌ Missing required fields in manifest.yaml: {missing_fields}')
                  sys.exit(1)
              else:
                  print('✅ manifest.yaml validation passed')
                  print(f'Plugin: {manifest[\"name\"]} v{manifest[\"version\"]}')
                  
          except Exception as e:
              print(f'❌ Error validating manifest.yaml: {e}')
              sys.exit(1)
          "

      - name: Run basic Python syntax check
        run: |
          echo "Checking Python syntax..."
          python -m py_compile main.py
          find . -name "*.py" -exec python -m py_compile {} \;
          echo "✅ Python syntax check passed"

      - name: Run plugin unit tests (if exist)
        run: |
          if [[ -d "tests" ]]; then
            echo "Running unit tests..."
            python -m pytest tests/ -v || echo "⚠️  Some tests failed"
          else
            echo "No tests directory found, skipping unit tests"
          fi
        continue-on-error: true

  build-and-package:
    name: Build and Package Plugin
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: always() # Run even if lint-and-test has warnings
    
    outputs:
      plugin-name: ${{ steps.get-info.outputs.plugin-name }}
      plugin-version: ${{ steps.get-info.outputs.plugin-version }}
      package-name: ${{ steps.get-info.outputs.package-name }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get plugin info from manifest
        id: get-info
        run: |
          PLUGIN_NAME=$(python -c "import yaml; print(yaml.safe_load(open('manifest.yaml'))['name'])")
          PLUGIN_VERSION=$(python -c "import yaml; print(yaml.safe_load(open('manifest.yaml'))['version'])")
          PACKAGE_NAME="${PLUGIN_NAME}-${PLUGIN_VERSION}.difypkg"
          
          echo "plugin-name=${PLUGIN_NAME}" >> $GITHUB_OUTPUT
          echo "plugin-version=${PLUGIN_VERSION}" >> $GITHUB_OUTPUT  
          echo "package-name=${PACKAGE_NAME}" >> $GITHUB_OUTPUT
          
          echo "Plugin Name: ${PLUGIN_NAME}"
          echo "Plugin Version: ${PLUGIN_VERSION}"
          echo "Package Name: ${PACKAGE_NAME}"

      - name: Download Dify Plugin CLI
        run: |
          echo "Downloading Dify Plugin CLI..."
          mkdir -p $HOME/bin
          
          # Download the CLI tool
          wget -O $HOME/bin/dify https://github.com/langgenius/dify-plugin-daemon/releases/latest/download/dify-plugin-linux-amd64
          chmod +x $HOME/bin/dify
          
          # Add to PATH
          echo "$HOME/bin" >> $GITHUB_PATH
          
          echo "✅ Dify Plugin CLI downloaded successfully"

      - name: Verify CLI installation
        run: |
          dify version
          echo "✅ Dify Plugin CLI is ready"

      - name: Package plugin
        id: package
        run: |
          echo "Packaging plugin..."
          PACKAGE_NAME="${{ steps.get-info.outputs.package-name }}"
          
          # Package the plugin
          dify plugin package . -o "${PACKAGE_NAME}"
          
          # Verify package was created
          if [[ -f "${PACKAGE_NAME}" ]]; then
            echo "✅ Plugin packaged successfully: ${PACKAGE_NAME}"
            ls -la "${PACKAGE_NAME}"
            echo "package-path=${PWD}/${PACKAGE_NAME}" >> $GITHUB_OUTPUT
          else
            echo "❌ Package creation failed"
            exit 1
          fi

      - name: Upload package artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.get-info.outputs.package-name }}
          path: ${{ steps.package.outputs.package-path }}
          retention-days: 30

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build-and-package
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download package artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.build-and-package.outputs.package-name }}
          path: ./artifacts

      - name: Generate release info
        id: release-info
        run: |
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            # Tag-based release
            RELEASE_TAG="${{ github.ref_name }}"
            RELEASE_NAME="${{ needs.build-and-package.outputs.plugin-name }} ${{ github.ref_name }}"
            IS_PRERELEASE="false"
          else
            # Development build from main branch
            RELEASE_TAG="build-$(date +'%Y%m%d-%H%M%S')-${GITHUB_SHA:0:7}"
            RELEASE_NAME="Development Build $(date +'%Y-%m-%d')"
            IS_PRERELEASE="true"
          fi
          
          RELEASE_BODY="🚀 **${{ needs.build-and-package.outputs.plugin-name }} Build**

          **Plugin:** ${{ needs.build-and-package.outputs.plugin-name }}
          **Version:** ${{ needs.build-and-package.outputs.plugin-version }}
          **Build Date:** $(date +'%Y-%m-%d %H:%M:%S UTC')
          **Commit:** ${{ github.sha }}
          **Branch/Tag:** ${{ github.ref_name }}
          
          ## Installation
          1. Download the \`.difypkg\` file from this release
          2. Go to your Dify workspace plugin management page  
          3. Click \"Install Plugin\" → \"Upload from local file\"
          4. Select the downloaded \`.difypkg\` file
          
          ## Changes
          See commit history for detailed changes."
          
          echo "release-tag=${RELEASE_TAG}" >> $GITHUB_OUTPUT
          echo "release-name=${RELEASE_NAME}" >> $GITHUB_OUTPUT
          echo "is-prerelease=${IS_PRERELEASE}" >> $GITHUB_OUTPUT
          echo "release-body<<EOF" >> $GITHUB_OUTPUT
          echo "${RELEASE_BODY}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT


      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.release-info.outputs.release-tag }}
          name: ${{ steps.release-info.outputs.release-name }}
          body: ${{ steps.release-info.outputs.release-body }}
          files: |
            ./artifacts/${{ needs.build-and-package.outputs.package-name }}
          prerelease: ${{ steps.release-info.outputs.is-prerelease }}
          make_latest: ${{ github.ref_type == 'tag' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Output release info
        run: |
          echo "🎉 Release created successfully!"
          echo "📦 Package: ${{ needs.build-and-package.outputs.package-name }}"
          echo "🏷️  Tag: ${{ steps.release-info.outputs.release-tag }}"
          echo "📝 Release: ${{ steps.release-info.outputs.release-name }}"